/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MoraMakerV2Interface extends ethers.utils.Interface {
  functions: {
    "boughtMora()": FunctionFragment;
    "boughtUsdc()": FunctionFragment;
    "convert(address,address)": FunctionFragment;
    "convertMultiple(address[],address[])": FunctionFragment;
    "convertMultipleSingleToken(address[])": FunctionFragment;
    "convertSingleToken(address)": FunctionFragment;
    "factory()": FunctionFragment;
    "moraBridgeFor(address)": FunctionFragment;
    "moraBuybackPercent()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setMoraBridge(address,address)": FunctionFragment;
    "setMoraBuybackPercent(uint256)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "setUsdcBridge(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "usdcBridgeFor(address)": FunctionFragment;
    "xmora()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "boughtMora",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "boughtUsdc",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "convert",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "convertMultiple",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "convertMultipleSingleToken",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "convertSingleToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "moraBridgeFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "moraBuybackPercent",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMoraBridge",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMoraBuybackPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setUsdcBridge",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "usdcBridgeFor",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "xmora", values?: undefined): string;

  decodeFunctionResult(functionFragment: "boughtMora", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boughtUsdc", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertMultipleSingleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertSingleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "moraBridgeFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "moraBuybackPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMoraBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMoraBuybackPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUsdcBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "usdcBridgeFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xmora", data: BytesLike): Result;

  events: {
    "LogConvertSingleToken(address,address,uint256,uint256,uint256)": EventFragment;
    "LogConvertToMORA(address,address,address,uint256,uint256,uint256)": EventFragment;
    "LogConvertToUSDC(address,address,address,uint256,uint256,uint256)": EventFragment;
    "LogMoraBridgeSet(address,address)": EventFragment;
    "LogMoraBuybackPercentSet(uint256)": EventFragment;
    "LogTreasurySet(address)": EventFragment;
    "LogUsdcBridgeSet(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LogConvertSingleToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogConvertToMORA"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogConvertToUSDC"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMoraBridgeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogMoraBuybackPercentSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogTreasurySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogUsdcBridgeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class MoraMakerV2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MoraMakerV2Interface;

  functions: {
    boughtMora(overrides?: CallOverrides): Promise<[BigNumber]>;

    "boughtMora()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    boughtUsdc(overrides?: CallOverrides): Promise<[BigNumber]>;

    "boughtUsdc()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    convert(
      token0: string,
      token1: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "convert(address,address)"(
      token0: string,
      token1: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    convertMultiple(
      token0: string[],
      token1: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "convertMultiple(address[],address[])"(
      token0: string[],
      token1: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    convertMultipleSingleToken(
      token: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "convertMultipleSingleToken(address[])"(
      token: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    convertSingleToken(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "convertSingleToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    moraBridgeFor(
      token: string,
      overrides?: CallOverrides
    ): Promise<[string] & { bridge: string }>;

    "moraBridgeFor(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[string] & { bridge: string }>;

    moraBuybackPercent(overrides?: CallOverrides): Promise<[BigNumber]>;

    "moraBuybackPercent()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setMoraBridge(
      token: string,
      bridge: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMoraBridge(address,address)"(
      token: string,
      bridge: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMoraBuybackPercent(
      _moraBuybackPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMoraBuybackPercent(uint256)"(
      _moraBuybackPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTreasury(address)"(
      _treasury: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setUsdcBridge(
      token: string,
      bridge: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setUsdcBridge(address,address)"(
      token: string,
      bridge: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    "treasury()"(overrides?: CallOverrides): Promise<[string]>;

    usdcBridgeFor(
      token: string,
      overrides?: CallOverrides
    ): Promise<[string] & { bridge: string }>;

    "usdcBridgeFor(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[string] & { bridge: string }>;

    xmora(overrides?: CallOverrides): Promise<[string]>;

    "xmora()"(overrides?: CallOverrides): Promise<[string]>;
  };

  boughtMora(overrides?: CallOverrides): Promise<BigNumber>;

  "boughtMora()"(overrides?: CallOverrides): Promise<BigNumber>;

  boughtUsdc(overrides?: CallOverrides): Promise<BigNumber>;

  "boughtUsdc()"(overrides?: CallOverrides): Promise<BigNumber>;

  convert(
    token0: string,
    token1: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "convert(address,address)"(
    token0: string,
    token1: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  convertMultiple(
    token0: string[],
    token1: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "convertMultiple(address[],address[])"(
    token0: string[],
    token1: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  convertMultipleSingleToken(
    token: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "convertMultipleSingleToken(address[])"(
    token: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  convertSingleToken(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "convertSingleToken(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  moraBridgeFor(token: string, overrides?: CallOverrides): Promise<string>;

  "moraBridgeFor(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<string>;

  moraBuybackPercent(overrides?: CallOverrides): Promise<BigNumber>;

  "moraBuybackPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setMoraBridge(
    token: string,
    bridge: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMoraBridge(address,address)"(
    token: string,
    bridge: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMoraBuybackPercent(
    _moraBuybackPercent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMoraBuybackPercent(uint256)"(
    _moraBuybackPercent: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTreasury(address)"(
    _treasury: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setUsdcBridge(
    token: string,
    bridge: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setUsdcBridge(address,address)"(
    token: string,
    bridge: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  "treasury()"(overrides?: CallOverrides): Promise<string>;

  usdcBridgeFor(token: string, overrides?: CallOverrides): Promise<string>;

  "usdcBridgeFor(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<string>;

  xmora(overrides?: CallOverrides): Promise<string>;

  "xmora()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    boughtMora(overrides?: CallOverrides): Promise<BigNumber>;

    "boughtMora()"(overrides?: CallOverrides): Promise<BigNumber>;

    boughtUsdc(overrides?: CallOverrides): Promise<BigNumber>;

    "boughtUsdc()"(overrides?: CallOverrides): Promise<BigNumber>;

    convert(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "convert(address,address)"(
      token0: string,
      token1: string,
      overrides?: CallOverrides
    ): Promise<void>;

    convertMultiple(
      token0: string[],
      token1: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "convertMultiple(address[],address[])"(
      token0: string[],
      token1: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    convertMultipleSingleToken(
      token: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "convertMultipleSingleToken(address[])"(
      token: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    convertSingleToken(token: string, overrides?: CallOverrides): Promise<void>;

    "convertSingleToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    moraBridgeFor(token: string, overrides?: CallOverrides): Promise<string>;

    "moraBridgeFor(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    moraBuybackPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "moraBuybackPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setMoraBridge(
      token: string,
      bridge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMoraBridge(address,address)"(
      token: string,
      bridge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMoraBuybackPercent(
      _moraBuybackPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMoraBuybackPercent(uint256)"(
      _moraBuybackPercent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(_treasury: string, overrides?: CallOverrides): Promise<void>;

    "setTreasury(address)"(
      _treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUsdcBridge(
      token: string,
      bridge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUsdcBridge(address,address)"(
      token: string,
      bridge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    "treasury()"(overrides?: CallOverrides): Promise<string>;

    usdcBridgeFor(token: string, overrides?: CallOverrides): Promise<string>;

    "usdcBridgeFor(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    xmora(overrides?: CallOverrides): Promise<string>;

    "xmora()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    LogConvertSingleToken(
      server: string | null,
      token: string | null,
      amount: null,
      amountMORA: null,
      amountUSDC: null
    ): EventFilter;

    LogConvertToMORA(
      server: string | null,
      token0: string | null,
      token1: string | null,
      amount0: null,
      amount1: null,
      amount: null
    ): EventFilter;

    LogConvertToUSDC(
      server: string | null,
      token0: string | null,
      token1: string | null,
      amount0: null,
      amount1: null,
      amount: null
    ): EventFilter;

    LogMoraBridgeSet(token: string | null, bridge: string | null): EventFilter;

    LogMoraBuybackPercentSet(percent: null): EventFilter;

    LogTreasurySet(treasury: string | null): EventFilter;

    LogUsdcBridgeSet(token: string | null, bridge: string | null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    boughtMora(overrides?: CallOverrides): Promise<BigNumber>;

    "boughtMora()"(overrides?: CallOverrides): Promise<BigNumber>;

    boughtUsdc(overrides?: CallOverrides): Promise<BigNumber>;

    "boughtUsdc()"(overrides?: CallOverrides): Promise<BigNumber>;

    convert(
      token0: string,
      token1: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "convert(address,address)"(
      token0: string,
      token1: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    convertMultiple(
      token0: string[],
      token1: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "convertMultiple(address[],address[])"(
      token0: string[],
      token1: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    convertMultipleSingleToken(
      token: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "convertMultipleSingleToken(address[])"(
      token: string[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    convertSingleToken(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "convertSingleToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    moraBridgeFor(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "moraBridgeFor(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    moraBuybackPercent(overrides?: CallOverrides): Promise<BigNumber>;

    "moraBuybackPercent()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setMoraBridge(
      token: string,
      bridge: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMoraBridge(address,address)"(
      token: string,
      bridge: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMoraBuybackPercent(
      _moraBuybackPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMoraBuybackPercent(uint256)"(
      _moraBuybackPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTreasury(_treasury: string, overrides?: Overrides): Promise<BigNumber>;

    "setTreasury(address)"(
      _treasury: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setUsdcBridge(
      token: string,
      bridge: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setUsdcBridge(address,address)"(
      token: string,
      bridge: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    "treasury()"(overrides?: CallOverrides): Promise<BigNumber>;

    usdcBridgeFor(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "usdcBridgeFor(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xmora(overrides?: CallOverrides): Promise<BigNumber>;

    "xmora()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    boughtMora(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "boughtMora()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    boughtUsdc(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "boughtUsdc()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convert(
      token0: string,
      token1: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "convert(address,address)"(
      token0: string,
      token1: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    convertMultiple(
      token0: string[],
      token1: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "convertMultiple(address[],address[])"(
      token0: string[],
      token1: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    convertMultipleSingleToken(
      token: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "convertMultipleSingleToken(address[])"(
      token: string[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    convertSingleToken(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "convertSingleToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    moraBridgeFor(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "moraBridgeFor(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    moraBuybackPercent(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "moraBuybackPercent()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setMoraBridge(
      token: string,
      bridge: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMoraBridge(address,address)"(
      token: string,
      bridge: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMoraBuybackPercent(
      _moraBuybackPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMoraBuybackPercent(uint256)"(
      _moraBuybackPercent: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTreasury(address)"(
      _treasury: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setUsdcBridge(
      token: string,
      bridge: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setUsdcBridge(address,address)"(
      token: string,
      bridge: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasury()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    usdcBridgeFor(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "usdcBridgeFor(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    xmora(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "xmora()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
