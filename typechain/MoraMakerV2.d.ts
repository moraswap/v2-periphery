/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MoraMakerV2Interface extends ethers.utils.Interface {
  functions: {
    "addAuth(address)": FunctionFragment;
    "bar()": FunctionFragment;
    "bridgeFor(address)": FunctionFragment;
    "convert(address,address,uint256)": FunctionFragment;
    "convertMultiple(address[],address[],uint256)": FunctionFragment;
    "devAddr()": FunctionFragment;
    "devCut()": FunctionFragment;
    "factory()": FunctionFragment;
    "getAuth(uint256)": FunctionFragment;
    "lenAuth()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeAuth(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setBridge(address,address)": FunctionFragment;
    "setDevAddr(address)": FunctionFragment;
    "setDevCut(uint256)": FunctionFragment;
    "setTokenToAddress(address)": FunctionFragment;
    "tokenTo()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addAuth", values: [string]): string;
  encodeFunctionData(functionFragment: "bar", values?: undefined): string;
  encodeFunctionData(functionFragment: "bridgeFor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "convert",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "convertMultiple",
    values: [string[], string[], BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "devAddr", values?: undefined): string;
  encodeFunctionData(functionFragment: "devCut", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAuth",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lenAuth", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "removeAuth", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBridge",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "setDevAddr", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setDevCut",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTokenToAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "tokenTo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addAuth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bridgeFor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "convert", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertMultiple",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "devAddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "devCut", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAuth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lenAuth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeAuth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBridge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDevAddr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDevCut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTokenToAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AddAuthorizedAddress(address)": EventFragment;
    "LogBridgeSet(address,address,address)": EventFragment;
    "LogConvert(address,address,address,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RemoveAuthorizedAddress(address)": EventFragment;
    "SetDevAddr(address)": EventFragment;
    "SetDevCut(uint256)": EventFragment;
    "SetTokenTo(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddAuthorizedAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogBridgeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LogConvert"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemoveAuthorizedAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDevAddr"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDevCut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenTo"): EventFragment;
}

export class MoraMakerV2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MoraMakerV2Interface;

  functions: {
    addAuth(_auth: string, overrides?: Overrides): Promise<ContractTransaction>;

    "addAuth(address)"(
      _auth: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    bar(overrides?: CallOverrides): Promise<[string]>;

    "bar()"(overrides?: CallOverrides): Promise<[string]>;

    bridgeFor(
      token: string,
      overrides?: CallOverrides
    ): Promise<[string] & { bridge: string }>;

    "bridgeFor(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[string] & { bridge: string }>;

    convert(
      token0: string,
      token1: string,
      slippage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "convert(address,address,uint256)"(
      token0: string,
      token1: string,
      slippage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    convertMultiple(
      token0: string[],
      token1: string[],
      slippage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "convertMultiple(address[],address[],uint256)"(
      token0: string[],
      token1: string[],
      slippage: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    devAddr(overrides?: CallOverrides): Promise<[string]>;

    "devAddr()"(overrides?: CallOverrides): Promise<[string]>;

    devCut(overrides?: CallOverrides): Promise<[BigNumber]>;

    "devCut()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    "factory()"(overrides?: CallOverrides): Promise<[string]>;

    getAuth(index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "getAuth(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    lenAuth(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lenAuth()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    removeAuth(
      _auth: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeAuth(address)"(
      _auth: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setBridge(
      token: string,
      bridge: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBridge(address,address)"(
      token: string,
      bridge: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDevAddr(
      _addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDevAddr(address)"(
      _addr: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setDevCut(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDevCut(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTokenToAddress(
      _tokenTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTokenToAddress(address)"(
      _tokenTo: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    tokenTo(overrides?: CallOverrides): Promise<[string]>;

    "tokenTo()"(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addAuth(_auth: string, overrides?: Overrides): Promise<ContractTransaction>;

  "addAuth(address)"(
    _auth: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  bar(overrides?: CallOverrides): Promise<string>;

  "bar()"(overrides?: CallOverrides): Promise<string>;

  bridgeFor(token: string, overrides?: CallOverrides): Promise<string>;

  "bridgeFor(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<string>;

  convert(
    token0: string,
    token1: string,
    slippage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "convert(address,address,uint256)"(
    token0: string,
    token1: string,
    slippage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  convertMultiple(
    token0: string[],
    token1: string[],
    slippage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "convertMultiple(address[],address[],uint256)"(
    token0: string[],
    token1: string[],
    slippage: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  devAddr(overrides?: CallOverrides): Promise<string>;

  "devAddr()"(overrides?: CallOverrides): Promise<string>;

  devCut(overrides?: CallOverrides): Promise<BigNumber>;

  "devCut()"(overrides?: CallOverrides): Promise<BigNumber>;

  factory(overrides?: CallOverrides): Promise<string>;

  "factory()"(overrides?: CallOverrides): Promise<string>;

  getAuth(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "getAuth(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  lenAuth(overrides?: CallOverrides): Promise<BigNumber>;

  "lenAuth()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  removeAuth(
    _auth: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeAuth(address)"(
    _auth: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setBridge(
    token: string,
    bridge: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBridge(address,address)"(
    token: string,
    bridge: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDevAddr(
    _addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDevAddr(address)"(
    _addr: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setDevCut(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDevCut(uint256)"(
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTokenToAddress(
    _tokenTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTokenToAddress(address)"(
    _tokenTo: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  tokenTo(overrides?: CallOverrides): Promise<string>;

  "tokenTo()"(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addAuth(_auth: string, overrides?: CallOverrides): Promise<void>;

    "addAuth(address)"(_auth: string, overrides?: CallOverrides): Promise<void>;

    bar(overrides?: CallOverrides): Promise<string>;

    "bar()"(overrides?: CallOverrides): Promise<string>;

    bridgeFor(token: string, overrides?: CallOverrides): Promise<string>;

    "bridgeFor(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    convert(
      token0: string,
      token1: string,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "convert(address,address,uint256)"(
      token0: string,
      token1: string,
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    convertMultiple(
      token0: string[],
      token1: string[],
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "convertMultiple(address[],address[],uint256)"(
      token0: string[],
      token1: string[],
      slippage: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    devAddr(overrides?: CallOverrides): Promise<string>;

    "devAddr()"(overrides?: CallOverrides): Promise<string>;

    devCut(overrides?: CallOverrides): Promise<BigNumber>;

    "devCut()"(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<string>;

    "factory()"(overrides?: CallOverrides): Promise<string>;

    getAuth(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "getAuth(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    lenAuth(overrides?: CallOverrides): Promise<BigNumber>;

    "lenAuth()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    removeAuth(_auth: string, overrides?: CallOverrides): Promise<void>;

    "removeAuth(address)"(
      _auth: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setBridge(
      token: string,
      bridge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBridge(address,address)"(
      token: string,
      bridge: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDevAddr(_addr: string, overrides?: CallOverrides): Promise<void>;

    "setDevAddr(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setDevCut(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "setDevCut(uint256)"(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTokenToAddress(
      _tokenTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTokenToAddress(address)"(
      _tokenTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenTo(overrides?: CallOverrides): Promise<string>;

    "tokenTo()"(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddAuthorizedAddress(_addr: string | null): EventFilter;

    LogBridgeSet(
      token: string | null,
      oldBridge: string | null,
      bridge: string | null
    ): EventFilter;

    LogConvert(
      server: string | null,
      token0: string | null,
      token1: string | null,
      amount0: null,
      amount1: null,
      amountTOKEN: null
    ): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RemoveAuthorizedAddress(_addr: string | null): EventFilter;

    SetDevAddr(_addr: null): EventFilter;

    SetDevCut(_amount: null): EventFilter;

    SetTokenTo(_tokenTo: null): EventFilter;
  };

  estimateGas: {
    addAuth(_auth: string, overrides?: Overrides): Promise<BigNumber>;

    "addAuth(address)"(
      _auth: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    bar(overrides?: CallOverrides): Promise<BigNumber>;

    "bar()"(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeFor(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    "bridgeFor(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convert(
      token0: string,
      token1: string,
      slippage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "convert(address,address,uint256)"(
      token0: string,
      token1: string,
      slippage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    convertMultiple(
      token0: string[],
      token1: string[],
      slippage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "convertMultiple(address[],address[],uint256)"(
      token0: string[],
      token1: string[],
      slippage: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    devAddr(overrides?: CallOverrides): Promise<BigNumber>;

    "devAddr()"(overrides?: CallOverrides): Promise<BigNumber>;

    devCut(overrides?: CallOverrides): Promise<BigNumber>;

    "devCut()"(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    "factory()"(overrides?: CallOverrides): Promise<BigNumber>;

    getAuth(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "getAuth(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lenAuth(overrides?: CallOverrides): Promise<BigNumber>;

    "lenAuth()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeAuth(_auth: string, overrides?: Overrides): Promise<BigNumber>;

    "removeAuth(address)"(
      _auth: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setBridge(
      token: string,
      bridge: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBridge(address,address)"(
      token: string,
      bridge: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDevAddr(_addr: string, overrides?: Overrides): Promise<BigNumber>;

    "setDevAddr(address)"(
      _addr: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setDevCut(_amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "setDevCut(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTokenToAddress(
      _tokenTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTokenToAddress(address)"(
      _tokenTo: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    tokenTo(overrides?: CallOverrides): Promise<BigNumber>;

    "tokenTo()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAuth(
      _auth: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addAuth(address)"(
      _auth: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    bar(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bar()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridgeFor(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "bridgeFor(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convert(
      token0: string,
      token1: string,
      slippage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "convert(address,address,uint256)"(
      token0: string,
      token1: string,
      slippage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    convertMultiple(
      token0: string[],
      token1: string[],
      slippage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "convertMultiple(address[],address[],uint256)"(
      token0: string[],
      token1: string[],
      slippage: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    devAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "devAddr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    devCut(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "devCut()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factory()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAuth(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getAuth(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lenAuth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lenAuth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAuth(
      _auth: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeAuth(address)"(
      _auth: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setBridge(
      token: string,
      bridge: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBridge(address,address)"(
      token: string,
      bridge: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDevAddr(
      _addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDevAddr(address)"(
      _addr: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setDevCut(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDevCut(uint256)"(
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTokenToAddress(
      _tokenTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTokenToAddress(address)"(
      _tokenTo: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    tokenTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "tokenTo()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
