/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface VestingInterface extends ethers.utils.Interface {
  functions: {
    "begin()": FunctionFragment;
    "claim()": FunctionFragment;
    "cliff()": FunctionFragment;
    "end()": FunctionFragment;
    "lastUpdate()": FunctionFragment;
    "mora()": FunctionFragment;
    "owner()": FunctionFragment;
    "recipient()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setRecipient(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vestingAmount()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "begin", values?: undefined): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(functionFragment: "cliff", values?: undefined): string;
  encodeFunctionData(functionFragment: "end", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastUpdate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "mora", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "recipient", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingAmount",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "begin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cliff", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "end", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastUpdate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mora", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "recipient", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingAmount",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export class Vesting extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: VestingInterface;

  functions: {
    begin(overrides?: CallOverrides): Promise<[BigNumber]>;

    "begin()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(overrides?: Overrides): Promise<ContractTransaction>;

    "claim()"(overrides?: Overrides): Promise<ContractTransaction>;

    cliff(overrides?: CallOverrides): Promise<[BigNumber]>;

    "cliff()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    end(overrides?: CallOverrides): Promise<[BigNumber]>;

    "end()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastUpdate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    mora(overrides?: CallOverrides): Promise<[string]>;

    "mora()"(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    recipient(overrides?: CallOverrides): Promise<[string]>;

    "recipient()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setRecipient(
      _recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setRecipient(address)"(
      _recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    vestingAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "vestingAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  begin(overrides?: CallOverrides): Promise<BigNumber>;

  "begin()"(overrides?: CallOverrides): Promise<BigNumber>;

  claim(overrides?: Overrides): Promise<ContractTransaction>;

  "claim()"(overrides?: Overrides): Promise<ContractTransaction>;

  cliff(overrides?: CallOverrides): Promise<BigNumber>;

  "cliff()"(overrides?: CallOverrides): Promise<BigNumber>;

  end(overrides?: CallOverrides): Promise<BigNumber>;

  "end()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

  "lastUpdate()"(overrides?: CallOverrides): Promise<BigNumber>;

  mora(overrides?: CallOverrides): Promise<string>;

  "mora()"(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  recipient(overrides?: CallOverrides): Promise<string>;

  "recipient()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setRecipient(
    _recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setRecipient(address)"(
    _recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  vestingAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "vestingAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    begin(overrides?: CallOverrides): Promise<BigNumber>;

    "begin()"(overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: CallOverrides): Promise<void>;

    "claim()"(overrides?: CallOverrides): Promise<void>;

    cliff(overrides?: CallOverrides): Promise<BigNumber>;

    "cliff()"(overrides?: CallOverrides): Promise<BigNumber>;

    end(overrides?: CallOverrides): Promise<BigNumber>;

    "end()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdate()"(overrides?: CallOverrides): Promise<BigNumber>;

    mora(overrides?: CallOverrides): Promise<string>;

    "mora()"(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    recipient(overrides?: CallOverrides): Promise<string>;

    "recipient()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setRecipient(_recipient: string, overrides?: CallOverrides): Promise<void>;

    "setRecipient(address)"(
      _recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    vestingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "vestingAmount()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;
  };

  estimateGas: {
    begin(overrides?: CallOverrides): Promise<BigNumber>;

    "begin()"(overrides?: CallOverrides): Promise<BigNumber>;

    claim(overrides?: Overrides): Promise<BigNumber>;

    "claim()"(overrides?: Overrides): Promise<BigNumber>;

    cliff(overrides?: CallOverrides): Promise<BigNumber>;

    "cliff()"(overrides?: CallOverrides): Promise<BigNumber>;

    end(overrides?: CallOverrides): Promise<BigNumber>;

    "end()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdate(overrides?: CallOverrides): Promise<BigNumber>;

    "lastUpdate()"(overrides?: CallOverrides): Promise<BigNumber>;

    mora(overrides?: CallOverrides): Promise<BigNumber>;

    "mora()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    recipient(overrides?: CallOverrides): Promise<BigNumber>;

    "recipient()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setRecipient(_recipient: string, overrides?: Overrides): Promise<BigNumber>;

    "setRecipient(address)"(
      _recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    vestingAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "vestingAmount()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    begin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "begin()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claim()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    cliff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "cliff()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    end(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "end()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastUpdate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mora(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "mora()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "recipient()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setRecipient(
      _recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setRecipient(address)"(
      _recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    vestingAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vestingAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
